<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ parameter name="defaultServer" type="string" #>
<#@ parameter name="appCenterId" type="string" #>
<#@ parameter name="configuration" type="string" #>
<#@ parameter name="flavor" type="string" #>
<#@ parameter name="packageIdentifier" type="string" #>
<#@ parameter name="teamEntry" type="string" #>
<#@ parameter name="offlineAccess" type="string" #>
<#@ parameter name="prefersLocalAuthentication" type="string" #>
<#@ parameter name="podcasts" type="string" #>
<#@ parameter name="termsOfUse" type="string" #>
<#@ parameter name="statsAccess" type="string" #>
<#@ parameter name="interestsAccess" type="string" #>
<#@ parameter name="notesAccess" type="string" #>
<#@ parameter name="groupsSetting" type="string" #>
<#@ parameter name="accountSetting" type="string" #>
<#@ parameter name="feedbackAccess" type="string" #>
<#@ parameter name="supportSetting" type="string" #>
<#@ parameter name="fullSemVersion" type="string" #>
<#@ parameter name="appName" type="string" #>
<#@ parameter name="tagFollowing" type="string" #>
<#@ parameter name="privacyPolicySetting" type="string" #>
<#@ parameter name="clientId" type="string" #>
<#@ parameter name="clientSecret" type="string" #>
<#@ parameter name="supportPath" type="string" #>
<#@ parameter name="legalInfoPath" type="string" #>
<#@ parameter name="userAgent" type="string" #>
<#@ parameter name="debugDefaultServer" type="string" #>
<#@ parameter name="oauthRedirectUri" type="string" #>
<#@ parameter name="enableUnityFramework" type="string" #>
<#@ parameter name="allowedHost" type="string" #>
<#@ parameter name="defaultReachabilityUri" type="string" #>
<#@ parameter name="unityMessageLabel" type="string" #>
using System;

namespace PERLS
{
    /// <summary>
    /// The app configuration settings.
    /// </summary>
    public static partial class Constants
    {
        /// <summary>
        /// Gets the base URL used for communicating with the API.
        /// </summary>
        /// <remarks>
        /// This should be configurable at runtime on non-production builds.
        /// </remarks>
        /// <value>The base URL.</value>
        public static Uri DefaultServer => new Uri("<#= defaultServer #>");

        /// <summary>
        /// Gets the App Center identifier.
        /// </summary>
        /// <value>The App Center identifier.</value>
        public static Guid AppCenterId => new Guid("<#= appCenterId #>");

        /// <summary>
        /// Gets the build configuration that was set at build time.
        /// </summary>
        /// <value>The build configuration that was set at build time.</value>
        public const BuildConfiguration Configuration = BuildConfiguration.<#= configuration #>;

        /// <summary>
        /// Gets the build flavor that was set at build time.
        /// </summary>
        /// <value>The build flavor that was set at build time.</value>
        public const BuildFlavor Flavor = BuildFlavor.<#= flavor #>;

        /// <summary>
        /// Gets the current package identifier.
        /// </summary>
        /// <value>The package identifier.</value>
        public const string PackageIdentifier = "<#= packageIdentifier #>";

        /// <summary>
        /// Indicates whether or not team entry should be enabled for this build.
        /// </summary>
        public const bool TeamEntry = <#= teamEntry #>;

        /// <summary>
        /// Indicates whether or not offline access should be enabled for this build.
        /// </summary>
        public const bool OfflineAccess = <#= offlineAccess #>;

        /// <summary>
        /// Indicates whether the build prefers to use local accounts as opposed to federated accounts.
        /// </summary>
        public const bool PrefersLocalAuthentication = <#= prefersLocalAuthentication #>;

        /// <summary>
        /// Indicates whether or not podcasts should be enabled for this build.
        /// </summary>
        public const bool Podcasts = <#= podcasts #>;

        /// <summary>
        /// Indicates whether to show terms of use instead of the Float legal info page.
        /// </summary>
        public const bool TermsOfUse = <#= termsOfUse #>;

        /// <summary>
        /// Indicates whether or not feedback access should be enabled for this build.
        /// </summary>
        public const bool FeedbackAccess = <#= feedbackAccess #>;

        /// <summary>
        /// Indicates whether or not stats access should be enabled for this build.
        /// </summary>
        public const bool StatsAccess = <#= statsAccess #>;

        /// <summary>
        /// Indicates whether or not interests access should be enabled for this build.
        /// </summary>
        public const bool InterestsAccess = <#= interestsAccess #>;

        /// <summary>
        /// Indicates whether or not notes access should be enabled for this build.
        /// </summary>
        public const bool NotesAccess = <#= notesAccess #>;

        /// <summary>
        /// Indicates whether or not groups setting should be enabled for this build.
        /// </summary>
        public const bool GroupsSetting = <#= groupsSetting #>;

        /// <summary>
        /// Indicates whether or not the account setting should be enabled for this build.
        /// </summary>
        public const bool AccountSetting = <#= accountSetting #>;

        /// <summary>
        /// Indicates whether or not the support setting should be enabled for this build.
        /// </summary>
        public const bool SupportSetting = <#= supportSetting #>;

        /// <summary>
        /// Indicates whether or not the tag following should be enabled for this build.
        /// </summary>
        public const bool TagFollowing = <#= tagFollowing #>;

        /// <summary>
        /// Indicates whether or not the privacy policy should be enabled for this build.
        /// </summary>
        public const bool PrivacyPolicySetting = <#= privacyPolicySetting #>;

        /// <summary>
        /// Indicates whether or not the native Unity framework should be enabled for this build.
        /// </summary>
        public const bool EnableUnityFramework = <#= enableUnityFramework #>;

        /// <summary>
        /// The full semantic version of the built application.
        /// </summary>
        public const string FullSemVersion = "<#= fullSemVersion #>";

        /// <summary>
        /// The name of this application.
        /// </summary>
        public const string AppName = "<#= appName #>";

        /// <summary>
        /// Gets the ClientID.
        /// </summary>
        /// <value>The client ID.</value>
        public const string ClientId = "<#= clientId #>";

        /// <summary>
        /// Gets the Client Secret.
        /// </summary>
        /// <value>The client secret.</value>
        public const string ClientSecret = "<#= clientSecret #>";

        /// <summary>
        /// Gets the URL for sending support requests.
        /// </summary>
        /// <value>The URL for support requests.</value>
        public static Uri SupportPath => new Uri("<#= supportPath #>");

        /// <summary>
        /// Gets the legal info path.
        /// </summary>
        /// <value>The legal info path.</value>
        public const string LegalInfoPath = "<#= legalInfoPath #>";

        /// <summary>
        /// Gets a static string to be included in the user agent string.
        /// </summary>
        public const string UserAgent = "<#= userAgent #>";

        /// <summary>
        /// Gets the default server to be pre-filled for debug builds.
        /// </summary>
        public const string DebugDefaultServer = "<#= debugDefaultServer #>";

        /// <summary>
        /// Gets the OAuth redirect URI.
        /// </summary>
        public const string OAuthRedirectUri = "<#= oauthRedirectUri #>";

        /// <summary>
        /// Gets the allowed host name.
        /// </summary>
        public const string AllowedHost = "<#= allowedHost #>";

        /// <summary>
        /// Gets the default reachability URI.
        /// </summary>
        public static Uri DefaultReachabilityUri => new Uri("<#= defaultReachabilityUri #>");

        /// <summary>
        /// Gets the expected text for messages sent from Unity.
        /// </summary>
        public const string UnityMessageLabel = "<#= unityMessageLabel #>";
    }
}
